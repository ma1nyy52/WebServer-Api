### Пояснительная записка к проекту  
«Система управления учебными заданиями и комнатами»  

---

#### Автор проекта  
Кузнецов Никита  

---

#### Описание идеи  
Проект представляет собой веб-приложение для организации учебного процесса в виртуальных "комнатах". Преподаватели (администраторы) могут создавать комнаты, публиковать задания и оценивать работы студентов. Участники комнат могут загружать решения в виде файлов, просматривать свои оценки и комментарии. Система обеспечивает базовую аутентификацию пользователей, восстановление пароля через контрольные вопросы и защиту данных.  

---

#### Описание реализации  
1. Архитектура:  
   - Приложение построено на микрофреймворке Flask с использованием SQLite для хранения данных.  
   - Маршруты: Реализованы раздельные маршруты для пользователей и администраторов (создание комнат, заданий, оценка работ).  
   - База данных: Включает таблицы для пользователей, комнат, заданий, участников и отправленных работ. Связи между таблицами обеспечены через внешние ключи.  

2. Ключевые функции:  
   - Аутентификация: Регистрация, вход, восстановление пароля через контрольный вопрос.  
   - Работа с файлами: Загрузка решений в папку uploads с уникальными именами для избежания конфликтов.  
   - Ролевая модель: Отдельный интерфейс для администраторов с возможностью управления комнатами и заданиями.  
   - Динамические шаблоны: Использование Jinja2 для отображения списка комнат, заданий и оценок.  

3. Интересные решения:  
   - Хеширование паролей и ответов на контрольные вопросы через Werkzeug.Security.  
   - Проверка прав доступа через сессии (например, запрет доступа к админ-панели для обычных пользователей).  
   - Обработка ошибок целостности данных (например, предотвращение дублирования участников в комнате).  

---

#### Используемые технологии и библиотеки  
- Backend:  
  - Flask (веб-фреймворк).  
  - SQLite3 (база данных).  
  - Werkzeug (безопасность: хеширование паролей).  
  - os, datetime (работа с файлами и временем).  

- Frontend:  
  - HTML/CSS (шаблоны и стили).  
  - Jinja2 (динамическая генерация контента).  

- Зависимости:  
  Для запуска требуются:  
   flask==3.0.2
  werkzeug==3.0.1
  
---

#### Инструкция по запуску  
1. Установите зависимости:  
     pip install flask werkzeug
     
2. Запустите приложение:  
     python app.py
     
3. Перейдите по адресу: http://localhost:5000.  

---

#### Структура проекта  
+-- app.py                  # Основной код приложения
+-- templates/              # HTML-шаблоны
¦   +-- index.html
¦   +-- admin_panel.html
¦   L-- ...                
+-- uploads/                # Загруженные файлы пользователей
L-- users.db                # База данных SQLite

---

Проект демонстрирует навыки работы с веб-разработкой на Flask, организацией БД и ролевой моделью доступа.  
Объем пояснительной записки: 1.5 страницы.
